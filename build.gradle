buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('junit:junit:4.12')
    testCompile('org.mockito:mockito-all:1.9.5')
    testCompile('org.hamcrest:hamcrest-core:1.3')
    testCompile('org.seleniumhq.selenium:selenium-java:2.53.0')
    testCompile('com.github.detro.ghostdriver:phantomjsdriver:1.0.1')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task appJar(type: Copy, dependsOn: build) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}

task buildDocker(type: Exec, dependsOn: appJar) {
    commandLine "docker", "build","-t", "library", "-f", "infrastructure/docker/Dockerfile", "."
}

task runDocker(type: Exec, dependsOn: buildDocker) {
    commandLine "docker", "run","-d", "-p", "8080:8080", "-t", "library"
}

check.dependsOn functionalTest
functionalTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}